{"version":3,"sources":["images/logo.svg","css/globals.js","serviceWorker.js","anim/spin.js","App.js","routes.js","SecondRoute.js","index.js"],"names":["module","exports","__webpack_require__","p","createGlobalStyle","_templateObject","Boolean","window","location","hostname","match","AnimSpin","keyframes","spin_templateObject","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","color","changeColor","bind","assertThisInitialized","setState","react_default","a","createElement","AppContainer","AppHeader","AppLogo","src","logo","alt","AppLink","href","target","rel","onClick","react_router_dom","to","React","Component","styled","div","App_templateObject","_templateObject2","img","_templateObject3","header","_templateObject4","routes","path","component","main","Fragment","globals","routeMap","map","route","i","react_router","assign","key","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0rBCEzBC,kBAAfC,KCUoBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,gUChBC,IAAMC,EAAWC,YAAHC,smBCKfC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,MAAOT,EAAMS,OAAS,WAGxBR,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBT,OAAAU,EAAA,EAAAV,CAAAD,IAPFA,6EAWjBG,KAAKS,SAAS,CACZJ,MAAO,6CAKT,OACEK,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAD,CAASC,IAAKC,IAAMC,IAAI,SACxBR,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,iDACAF,EAAAC,EAAAC,cAACO,EAAD,CACEC,KAAK,sBACLC,OAAO,SACPC,IAAI,sBACJjB,MAAOL,KAAKI,MAAMC,OAJpB,eAQAK,EAAAC,EAAAC,cAAA,UAAQW,QAASvB,KAAKM,aAAtB,aACAI,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMC,GAAG,WAAT,4BAnCQC,IAAMC,WA2ClBd,EAAee,IAAOC,IAAVC,KAIZX,EAAUS,IAAOjB,EAAVoB,IACF,SAACnC,GAAD,OAAWA,EAAMS,OAAS,YAG/BU,EAAUa,IAAOI,IAAVC,IACEzC,GAKTsB,EAAYc,IAAOM,OAAVC,KC1DTC,EAAS,CACX,CACIC,KAAM,UACNC,UCPO,WACX,OACI5B,EAAAC,EAAAC,cAAA,8BDOJ,CACIyB,KAAM,IACNC,UD8DO3C,IGpET4C,EACF7B,EAAAC,EAAAC,cAAAF,EAAAC,EAAA6B,SAAA,KACI9B,EAAAC,EAAAC,cAAC6B,EAAD,MACA/B,EAAAC,EAAAC,cFOO,WACX,IAAI8B,EAAWN,EAAOO,IAAI,SAACC,EAAOC,GAC9B,OAAOnC,EAAAC,EAAAC,cAACkC,EAAA,EAADhD,OAAAiD,OAAA,CAAOC,IAAKH,GAAOD,MAG9B,OACIlC,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACId,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACKJ,KEfT,OAIRO,IAASC,OAAOX,EAAMY,SAASC,eAAe,SLmHxC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0c27612a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {createGlobalStyle} from 'styled-components';\n\nexport default createGlobalStyle`\n    body {\n        margin: 0;\n        padding: 0;\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n            \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n            sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n    }\n\n    code {\n        font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace;\n    }\n\n`;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {keyframes} from 'styled-components';\n\nexport const AnimSpin = keyframes`\n    from {\n        transform: rotate(0deg);\n    }\n    to {\n        transform: rotate(360deg);\n    }\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport {Link} from 'react-router-dom';\n\nimport logo from './images/logo.svg';\nimport { AnimSpin } from './anim/spin';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      color: props.color || '#0000ff'\n    };\n\n    this.changeColor = this.changeColor.bind(this);\n  }\n\n  changeColor() {\n    this.setState({\n      color: \"#00ff00\"\n    });\n  }\n\n  render() {\n    return (\n      <AppContainer >\n        <AppHeader>\n          <AppLogo src={logo} alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <p>Hello world! This is some cool stuff</p>\n          <AppLink\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            color={this.state.color}\n          >\n            Learn React\n          </AppLink>\n          <button onClick={this.changeColor}>click me!</button>\n          <Link to=\"/second\">Also, click me!</Link>\n        </AppHeader>\n      </AppContainer>\n    );\n  }\n}\n\n\nconst AppContainer = styled.div`\n  text-align: center;\n`;\n\nconst AppLink = styled.a`\n  color: ${(props) => props.color || '#61dafb'};\n`\n\nconst AppLogo = styled.img`\n  animation: ${AnimSpin} infinite 20s linear;\n  height: 40vmin;\n  pointer-events: none;\n`;\n\nconst AppHeader = styled.header`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport RootLayout from './App';\nimport SecondLayout from './SecondRoute';\n\nconst routes = [\n    {\n        path: '/second',\n        component: SecondLayout\n    },\n    {\n        path: '/',\n        component: RootLayout\n    }\n];\n\nexport default () => {\n    let routeMap = routes.map((route, i) => {\n        return <Route key={i} {...route} />\n    });\n\n    return (\n        <Router>\n            <Switch>\n                {routeMap}\n            </Switch>\n        </Router>\n    )\n\n}\n","import React from 'react';\n\nexport default () => {\n    return (\n        <div>Second route!</div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport GlobalStyles from './css/globals';\nimport * as serviceWorker from './serviceWorker';\nimport Routes from './routes';\n\nconst main = (\n    <>\n        <GlobalStyles />\n        <Routes />\n    </>\n);\n\nReactDOM.render(main, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}