{"version":3,"sources":["images/logo.svg","css/globals.js","serviceWorker.js","anim/spin.js","App.js","routes.js","SecondRoute.js","index.js"],"names":["module","exports","__webpack_require__","p","createGlobalStyle","_templateObject","Boolean","window","location","hostname","match","AnimSpin","keyframes","spin_templateObject","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","color","changeColor","bind","assertThisInitialized","setState","react_default","a","createElement","AppContainer","AppHeader","AppLogo","src","logo","alt","AppLink","href","target","rel","onClick","react_router_dom","to","React","Component","styled","div","App_templateObject","_templateObject2","img","_templateObject3","header","_templateObject4","routes","path","component","main","Fragment","globals","routeMap","map","route","i","react_router","assign","key","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0rBCEzBC,kBAAfC,KCUoBC,QACU,cAA7BC,OAAOC,SAASC,UAEc,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,gUCf1B,IAAMC,EAAWC,YAAHC,smBCKfC,cACL,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACZC,MAAOT,EAAMS,OAAS,WAGvBR,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBT,OAAAU,EAAA,EAAAV,CAAAD,IAPDA,6EAWlBG,KAAKS,SAAS,CACbJ,MAAO,6CAKR,OACCK,EAAAC,EAAAC,cAACC,EAAD,KACCH,EAAAC,EAAAC,cAACE,EAAD,KACCJ,EAAAC,EAAAC,cAACG,EAAD,CAASC,IAAKC,IAAMC,IAAI,SACxBR,EAAAC,EAAAC,cAAA,iBACMF,EAAAC,EAAAC,cAAA,0BADN,wBAGAF,EAAAC,EAAAC,cAAA,iDACAF,EAAAC,EAAAC,cAACO,EAAD,CACCC,KAAK,sBACLC,OAAO,SACPC,IAAI,sBACJjB,MAAOL,KAAKI,MAAMC,OAJnB,eAQAK,EAAAC,EAAAC,cAAA,UAAQW,QAASvB,KAAKM,aAAtB,aACAI,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMC,GAAG,WAAT,4BAnCaC,IAAMC,WA0ClBd,EAAee,IAAOC,IAAVC,KAIZX,EAAUS,IAAOjB,EAAVoB,IACH,SAACnC,GAAD,OAAWA,EAAMS,OAAS,YAG9BU,EAAUa,IAAOI,IAAVC,IACCzC,GAKRsB,EAAYc,IAAOM,OAAVC,KCzDTC,EAAS,CACd,CACCC,KAAM,UACNC,UCPa,WACd,OAAO5B,EAAAC,EAAAC,cAAA,8BDQP,CACCyB,KAAM,IACNC,UD6Da3C,IGnET4C,EACL7B,EAAAC,EAAAC,cAAAF,EAAAC,EAAA6B,SAAA,KACC9B,EAAAC,EAAAC,cAAC6B,EAAD,MACA/B,EAAAC,EAAAC,cFOa,WACd,IAAI8B,EAAWN,EAAOO,IAAI,SAACC,EAAOC,GACjC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAA,EAADhD,OAAAiD,OAAA,CAAOC,IAAKH,GAAOD,MAG3B,OACClC,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACCd,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KAASJ,KEdV,OAIFO,IAASC,OAAOX,EAAMY,SAASC,eAAe,SL4GzC,kBAAmBC,WACtBA,UAAUC,cAAcC,MAAMC,KAAK,SAACC,GACnCA,EAAaC","file":"static/js/main.cae7fe45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport default createGlobalStyle`\r\n    body {\r\n        margin: 0;\r\n        padding: 0;\r\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\r\n            \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\r\n            sans-serif;\r\n        -webkit-font-smoothing: antialiased;\r\n        -moz-osx-font-smoothing: grayscale;\r\n    }\r\n\r\n    code {\r\n        font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace;\r\n    }\r\n\r\n`;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n\twindow.location.hostname === \"localhost\" ||\r\n\t\t// [::1] is the IPv6 localhost address.\r\n\t\twindow.location.hostname === \"[::1]\" ||\r\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\r\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n\t\t// The URL constructor is available in all browsers that support SW.\r\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n\t\tif (publicUrl.origin !== window.location.origin) {\r\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\r\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\r\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\twindow.addEventListener(\"load\", () => {\r\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n\t\t\tif (isLocalhost) {\r\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\r\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\r\n\r\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\r\n\t\t\t\t// service worker/PWA documentation.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\r\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Is not localhost. Just register service worker\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n\tnavigator.serviceWorker\r\n\t\t.register(swUrl)\r\n\t\t.then((registration) => {\r\n\t\t\tregistration.onupdatefound = () => {\r\n\t\t\t\tconst installingWorker = registration.installing;\r\n\t\t\t\tif (installingWorker == null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tinstallingWorker.onstatechange = () => {\r\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\r\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\r\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\r\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\r\n\t\t\t\t\t\t\t// content until all client tabs are closed.\r\n\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\r\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\r\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// At this point, everything has been precached.\r\n\t\t\t\t\t\t\t// It's the perfect time to display a\r\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\r\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\r\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\r\n\t\t});\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n\t// Check if the service worker can be found. If it can't reload the page.\r\n\tfetch(swUrl)\r\n\t\t.then((response) => {\r\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\r\n\t\t\tconst contentType = response.headers.get(\"content-type\");\r\n\t\t\tif (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\r\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\r\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\r\n\t\t\t\t\tregistration.unregister().then(() => {\r\n\t\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Service worker found. Proceed as normal.\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(() => {\r\n\t\t\tconsole.log(\"No internet connection found. App is running in offline mode.\");\r\n\t\t});\r\n}\r\n\r\nexport function unregister() {\r\n\tif (\"serviceWorker\" in navigator) {\r\n\t\tnavigator.serviceWorker.ready.then((registration) => {\r\n\t\t\tregistration.unregister();\r\n\t\t});\r\n\t}\r\n}\r\n","import { keyframes } from \"styled-components\";\r\n\r\nexport const AnimSpin = keyframes`\r\n    from {\r\n        transform: rotate(0deg);\r\n    }\r\n    to {\r\n        transform: rotate(360deg);\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport logo from \"./images/logo.svg\";\r\nimport { AnimSpin } from \"./anim/spin\";\r\n\r\nclass App extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tcolor: props.color || \"#0000ff\"\r\n\t\t};\r\n\r\n\t\tthis.changeColor = this.changeColor.bind(this);\r\n\t}\r\n\r\n\tchangeColor() {\r\n\t\tthis.setState({\r\n\t\t\tcolor: \"#00ff00\"\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<AppContainer>\r\n\t\t\t\t<AppHeader>\r\n\t\t\t\t\t<AppLogo src={logo} alt=\"logo\" />\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tEdit <code>src/App.js</code> and save to reload.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>Hello world! This is some cool stuff</p>\r\n\t\t\t\t\t<AppLink\r\n\t\t\t\t\t\thref=\"https://reactjs.org\"\r\n\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\trel=\"noopener noreferrer\"\r\n\t\t\t\t\t\tcolor={this.state.color}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tLearn React\r\n\t\t\t\t\t</AppLink>\r\n\t\t\t\t\t<button onClick={this.changeColor}>click me!</button>\r\n\t\t\t\t\t<Link to=\"/second\">Also, click me!</Link>\r\n\t\t\t\t</AppHeader>\r\n\t\t\t</AppContainer>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst AppContainer = styled.div`\r\n\ttext-align: center;\r\n`;\r\n\r\nconst AppLink = styled.a`\r\n\tcolor: ${(props) => props.color || \"#61dafb\"};\r\n`;\r\n\r\nconst AppLogo = styled.img`\r\n\tanimation: ${AnimSpin} infinite 20s linear;\r\n\theight: 40vmin;\r\n\tpointer-events: none;\r\n`;\r\n\r\nconst AppHeader = styled.header`\r\n\tbackground-color: #282c34;\r\n\tmin-height: 100vh;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\tfont-size: calc(10px + 2vmin);\r\n\tcolor: white;\r\n`;\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nimport RootLayout from \"./App\";\r\nimport SecondLayout from \"./SecondRoute\";\r\n\r\nconst routes = [\r\n\t{\r\n\t\tpath: \"/second\",\r\n\t\tcomponent: SecondLayout\r\n\t},\r\n\t{\r\n\t\tpath: \"/\",\r\n\t\tcomponent: RootLayout\r\n\t}\r\n];\r\n\r\nexport default () => {\r\n\tlet routeMap = routes.map((route, i) => {\r\n\t\treturn <Route key={i} {...route} />;\r\n\t});\r\n\r\n\treturn (\r\n\t\t<Router>\r\n\t\t\t<Switch>{routeMap}</Switch>\r\n\t\t</Router>\r\n\t);\r\n};\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n\treturn <div>Second route!</div>;\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"normalize.css\";\r\nimport GlobalStyles from \"./css/globals\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport Routes from \"./routes\";\r\n\r\nconst main = (\r\n\t<>\r\n\t\t<GlobalStyles />\r\n\t\t<Routes />\r\n\t</>\r\n);\r\n\r\nReactDOM.render(main, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}